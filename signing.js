// Generated by CoffeeScript 1.3.3
(function() {

  window.return_container = {};

  window.invokeRequest = function() {
    var canonicalQuery, host, i, lines, matches, pairs, query, secret, signature, signedURLArea, signedUrl, stringToSign, stringToSignArea, unsignedUrl, urlregex;
    if (getAccessKeyId() === "AWS Access Key ID") {
      alert("Please provide an AWS Access Key ID");
      return;
    }
    if (getSecretAccessKey() === "AWS Secret Access Key") {
      alert("Please provide an AWS Secret Access Key");
      return;
    }
    unsignedUrl = document.getElementById("UnsignedURL").value;
    if (unsignedUrl === "") {
      alert("Please provide a URL");
      return;
    }
    lines = unsignedUrl.split("\n");
    unsignedUrl = "";
    for (i in lines) {
      unsignedUrl += lines[i];
    }
    urlregex = new RegExp("^http:\\/\\/(.*)\\/onca\\/xml\\?(.*)$");
    matches = urlregex.exec(unsignedUrl);
    if (matches == null) {
      alert("Could not find PA-API end-point in the URL. Please ensure the URL looks like the example provided.");
      return;
    }
    host = matches[1].toLowerCase();
    query = matches[2];
    pairs = query.split("&");
    pairs = cleanupRequest(pairs);
    document.getElementById("NameValuePairs").value = pairs.join("\n");
    pairs = encodeNameValuePairs(pairs);
    pairs.sort();
    document.getElementById("OrderedPairs").value = pairs.join("\n");
    canonicalQuery = pairs.join("&");
    stringToSign = "GET\n" + host + "\n/onca/xml\n" + canonicalQuery;
    secret = getSecretAccessKey();
    signature = sign(secret, stringToSign);
    signedUrl = "http://" + host + "/onca/xml?" + canonicalQuery + "&Signature=" + signature;
    stringToSignArea = document.getElementById("StringToSign");
    stringToSignArea.value = stringToSign;
    signedURLArea = document.getElementById("SignedURL");
    return signedURLArea.value = signedUrl;
  };

  window.search_item = function(item) {
    var canonicalQuery, host, i, lines, matches, pairs, query, secret, signature, signedUrl, stringToSign, unsignedUrl, urlregex;
    unsignedUrl = "http://ecs.amazonaws.com/onca/xml?Service=AWSECommerceService\n&Version=2009-03-31\n&Operation=ItemSearch\n&ResponseGroup=ItemAttributes,Offers,Images\n&SearchIndex=All\n&Keywords=" + item;
    unsignedUrl = unsignedUrl + "\n&AssociateTag=thedealpandac-20";
    lines = unsignedUrl.split("\n");
    unsignedUrl = "";
    for (i in lines) {
      unsignedUrl += lines[i];
    }
    urlregex = new RegExp("^http:\\/\\/(.*)\\/onca\\/xml\\?(.*)$");
    matches = urlregex.exec(unsignedUrl);
    if (matches == null) {
      console.log("Could not find PA-API end-point in the URL. Please ensure the URL looks like the example provided.");
      return;
    }
    host = matches[1].toLowerCase();
    query = matches[2];
    pairs = query.split("&");
    pairs = cleanupRequest(pairs);
    pairs = encodeNameValuePairs(pairs);
    pairs.sort();
    canonicalQuery = pairs.join("&");
    stringToSign = "GET\n" + host + "\n/onca/xml\n" + canonicalQuery;
    secret = getSecretAccessKey();
    signature = sign(secret, stringToSign);
    signedUrl = "http://" + host + "/onca/xml?" + canonicalQuery + "&Signature=" + signature;
    return signedUrl;
  };

  window.call_api = function(url, word, callback) {
    var xhr,
      _this = this;
    xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.onreadystatechange = function(status, response) {
      var results;
      if (xhr.readyState === 4) {
        console.log("xhr", xhr);
        console.log("TOKEN RETRIEVAL LOGGED");
        window.obj = $.xml2json(xhr.response);
        console.log("OBJ", window.obj);
        results = window.process_items(window.obj);
        console.log("results 2", results);
        console.log("callback exist", callback != null);
        if (callback != null) {
          return callback(results);
        }
      }
    };
    xhr.send();
    return window.xhr = xhr;
  };

  window.search_process = function(searchword, callback) {
    var url;
    url = window.search_item(searchword);
    return window.call_api(url, searchword, callback);
  };

  window.camping_list = ["flashlight", "tent", "grill", "canoe", "lighter", "binoculars", "rope", "iPod", "iPad", "Nexus", "Kindle", "cumin", "cheddar cheese", "black pepper"];

  window.populate_list = function() {
    var word, _i, _len, _ref, _results;
    _ref = window.camping_list;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      word = _ref[_i];
      _results.push(window.search_process(word));
    }
    return _results;
  };

  window.stored_items = {};

  window.process_items = function(query) {
    var index, pulled_data, results, search_size, x, _i, _j, _results;
    if (query["Items"] != null) {
      search_size = query["Items"]["Item"].length - 1;
      if (search_size > 5) {
        search_size = 4;
      }
      console.log("search", (function() {
        _results = [];
        for (var _i = 0; 0 <= search_size ? _i <= search_size : _i >= search_size; 0 <= search_size ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
      results = [];
      for (index = _j = 0; 0 <= search_size ? _j <= search_size : _j >= search_size; index = 0 <= search_size ? ++_j : --_j) {
        x = query["Items"]["Item"][index];
        pulled_data = {};
        pulled_data["url"] = x["DetailPageURL"];
        if (x["ItemAttributes"]["ListPrice"] != null) {
          pulled_data["price"] = x["ItemAttributes"]["ListPrice"]["FormattedPrice"];
        }
        pulled_data["title"] = x["ItemAttributes"]["Title"];
        pulled_data["ASIN"] = x["ASIN"];
        if (x["OfferSummary"]["LowestNewPrice"] != null) {
          pulled_data["real_price"] = x["OfferSummary"]["LowestNewPrice"]["FormattedPrice"];
        }
        pulled_data["image"] = x["SmallImage"]["URL"];
        console.log("pulled data: ", pulled_data);
        results.push(pulled_data);
      }
      console.log("results", results);
      return results;
    } else {
      console.log("nothing found");
      return [];
    }
  };

  window.encodeNameValuePairs = function(pairs) {
    var i, index, name, pair, value;
    i = 0;
    while (i < pairs.length) {
      name = "";
      value = "";
      pair = pairs[i];
      index = pair.indexOf("=");
      if (index === -1) {
        name = pair;
      } else if (index === 0) {
        value = pair;
      } else {
        name = pair.substring(0, index);
        if (index < pair.length - 1) {
          value = pair.substring(index + 1);
        }
      }
      name = encodeURIComponent(decodeURIComponent(name));
      value = value.replace(/\+/g, "%20");
      value = encodeURIComponent(decodeURIComponent(value));
      pairs[i] = name + "=" + value;
      i++;
    }
    return pairs;
  };

  window.cleanupRequest = function(pairs) {
    var accessKeyId, haveAwsId, haveTimestamp, i, nPairs, p;
    haveTimestamp = false;
    haveAwsId = false;
    accessKeyId = getAccessKeyId();
    nPairs = pairs.length;
    i = 0;
    while (i < nPairs) {
      p = pairs[i];
      if (p.search(/^Timestamp=/) !== -1) {
        haveTimestamp = true;
      } else if (p.search(/^(AWSAccessKeyId|SubscriptionId)=/) !== -1) {
        pairs.splice(i, 1, "AWSAccessKeyId=" + accessKeyId);
        haveAwsId = true;
      } else if (p.search(/^Signature=/) !== -1) {
        pairs.splice(i, 1);
        i--;
        nPairs--;
      }
      i++;
    }
    if (!haveTimestamp) {
      pairs.push("Timestamp=" + getNowTimeStamp());
    }
    if (!haveAwsId) {
      pairs.push("AWSAccessKeyId=" + accessKeyId);
    }
    return pairs;
  };

  window.sign = function(secret, message) {
    var b64hash, i, ihash, imsg, ipad, messageBytes, ohash, omsg, opad, secretBytes, urlhash;
    messageBytes = str2binb(message);
    secretBytes = str2binb(secret);
    if (secretBytes.length > 16) {
      secretBytes = core_sha256(secretBytes, secret.length * chrsz);
    }
    ipad = Array(16);
    opad = Array(16);
    i = 0;
    while (i < 16) {
      ipad[i] = secretBytes[i] ^ 0x36363636;
      opad[i] = secretBytes[i] ^ 0x5C5C5C5C;
      i++;
    }
    imsg = ipad.concat(messageBytes);
    ihash = core_sha256(imsg, 512 + message.length * chrsz);
    omsg = opad.concat(ihash);
    ohash = core_sha256(omsg, 512 + 256);
    b64hash = binb2b64(ohash);
    urlhash = encodeURIComponent(b64hash);
    return urlhash;
  };

  Date.prototype.toISODate = new Function("with (this)\n    return " + "getFullYear()+'-'+addZero(getMonth()+1)+'-'" + "+addZero(getDate())+'T'+addZero(getHours())+':'" + "+addZero(getMinutes())+':'+addZero(getSeconds())+'.000Z'");

  window.addZero = function(n) {
    return (n < 0 || n > 9 ? "" : "0") + n;
  };

  window.getNowTimeStamp = function() {
    var gmtTime, time;
    time = new Date();
    gmtTime = new Date(time.getTime() + (time.getTimezoneOffset() * 60000));
    return gmtTime.toISODate();
  };

  window.get_agent = function() {
    return "thedealpandac-20";
  };

  window.getAccessKeyId = function() {
    return "AKIAJ563ZSAI2VQVMEHA";
  };

  window.getSecretAccessKey = function() {
    return "RWzMxmIR3w6zjqzr7Qe1TF5Wb8t1VCqBjglWpUsn";
  };

  window.append_results = function(results) {
    var content, x, _i, _len, _results;
    console.log("called");
    console.log(results);
    $("#results").html("");
    _results = [];
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      x = results[_i];
      content = "<p><img height='40' src='" + x.image + "' /> <b>" + x.title + " - " + x.real_price + "</b>  </p>";
      _results.push($("#results").append(content));
    }
    return _results;
  };

  window.search = function() {
    var search_term;
    console.log("searching");
    search_term = $("#search_term").val();
    window.search_process(search_term, window.append_results);
    return false;
  };

}).call(this);
